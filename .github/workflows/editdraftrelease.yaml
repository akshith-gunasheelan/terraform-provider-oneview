name: Check Draft Release Assets
on:
  release:
    types:
      - created
      - edited

jobs:
  check_assets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Draft Release Assets
        id: check_assets
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Get the latest draft release
          draft_release=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases | \
              jq -r 'map(select(.draft))[0].id')

          # Check if the draft release exists and is not published yet
          if [[ -n "$draft_release" ]]; then
            echo "Latest draft release ID: $draft_release"

            # Get the assets for the draft release
            assets=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$draft_release/assets | \
              jq -r '.[].name')

            # Check if the required asset exists
            required_asset="terraform-provider-oneview_8.3.0-13_SHA256SUMS.sig"
            if echo "$assets" | grep -q "$required_asset"; then
              echo "Required asset '$required_asset' found in the draft release!"
              echo "::set-output name=asset_found::true"
            else
              echo "Required asset '$required_asset' not found in the draft release."
              echo "::set-output name=asset_found::false"
              exit 1
            fi
          else
            echo "No draft releases found."
            exit 1
          fi

      - name: Publish Release
        if: steps.check_assets.outputs.asset_found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Get the latest draft release ID
          draft_release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases | \
              jq -r 'map(select(.draft))[0].id')

          if [[ -n "$draft_release_id" ]]; then
            echo "Publishing the draft release with ID: $draft_release_id"
            curl -X PATCH -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/$draft_release_id \
              -d '{"draft": false}'
          else
            echo "No draft releases found."
            exit 1
          fi
